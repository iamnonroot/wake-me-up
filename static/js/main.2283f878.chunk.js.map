{"version":3,"sources":["components/Item.tsx","components/App.tsx","serviceWorkerRegistration.ts","reportWebVitals.ts","index.tsx","core/question.ts"],"names":["Item","props","useState","value","setValue","className","undefined","answer","question","type","onChange","input","parseInt","target","App","count","setCount","min","setMin","max","setMax","actions","setActions","generate","items","setItems","htmlFor","id","placeholder","map","action","index","name","checked","includes","indexOf","copy","push","splice","toggleActions","item","Boolean","window","location","hostname","match","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message","random","Math","floor","randomAction","length","normilizeQuestion","replace","questions","i","first","second","eval"],"mappings":"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","file":"static/js/main.2283f878.chunk.js","sourcesContent":["import React from \"react\";\nimport { useState } from \"react\";\n\ninterface ItemProps {\n    question: string\n    answer: number\n}\n\nexport function Item(props: ItemProps) {\n    const [value, setValue] = useState<number>();\n\n    const state = () => {\n        if (value === undefined) return '';\n        else if (value !== props.answer) return ' wrong';\n        else return ' right';\n    }\n\n    return (\n        <div className={`item${state()}`}>\n            <span>{props.question} = </span>&nbsp;<input type=\"number\" value={value} onChange={(input) => setValue(parseInt(input.target.value))} />\n        </div>\n    );\n}","import React, { useState } from 'react';\nimport { Action, generate, Question } from '../core/question';\nimport './App.scss';\nimport { Item } from './Item';\n\nfunction App() {\n  const [count, setCount] = useState<number>(10);\n  const [min, setMin] = useState<number>(0);\n  const [max, setMax] = useState<number>(10);\n  const [actions, setActions] = useState<Action[]>(['+', '-']);\n  const [items, setItems] = useState<Question[]>(generate(actions, min, max, count));\n\n  const toggleActions = (value: Action) => {\n    let index = actions.indexOf(value);\n    let copy = [...actions];\n    if (index === -1) {\n      copy.push(value);\n      setActions(copy);\n    } else {\n      copy.splice(index, 1);\n      setActions(copy);\n    }\n    setItems(generate(copy, min, max, count));\n  }\n\n  const hasAction = (value: Action): boolean => {\n    return actions.includes(value);\n  }\n\n  return (\n    <main>\n      <header>\n        <h3>Wake me up</h3>\n      </header>\n      <section className=\"settings\">\n        <label htmlFor=\"count\">Count </label>\n        <input id=\"count\" type=\"number\" value={count} min=\"0\" placeholder=\"Count\" onChange={(input) => { setCount(parseInt(input.target.value)); setItems(generate(actions, min, max, parseInt(input.target.value))); }} />\n        &nbsp;&nbsp;\n        <label htmlFor=\"min\">Min number </label>\n        <input id=\"min\" type=\"number\" value={min} max={max} placeholder=\"Min number\" onChange={(input) => { setMin(parseInt(input.target.value)); setItems(generate(actions, parseInt(input.target.value), max, count)); }} />\n        &nbsp;&nbsp;\n        <label htmlFor=\"max\">Max number </label>\n        <input id=\"max\" type=\"number\" value={max} min={min} placeholder=\"Max number\" onChange={(input) => { setMax(parseInt(input.target.value)); setItems(generate(actions, min, parseInt(input.target.value), count)); }} />\n        &nbsp;&nbsp;\n        <label htmlFor=\"actions\">Actions</label>\n        {\n          (['+', '-', '*', '/'] as Action[]).map((action: Action, index) => {\n            return (\n              <span key={index}>\n                <input type=\"checkbox\" name=\"action\" checked={hasAction(action)} onChange={() => toggleActions(action)} />\n                {action}\n              </span>\n            )\n          })\n        }\n      </section>\n      <br />\n      <div className=\"items\">\n        {\n          items.map((item, index) => <Item key={index} question={item.question} answer={item.answer} />)\n        }\n      </div>\n    </main>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.unregister();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","\nexport interface Question {\n    question: string\n    answer: number\n}\n\nexport type Action = '+' | '-' | '*' | '/';\n\nfunction random(min: number = 0, max: number = 10): number {\n    return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n\nfunction randomAction(actions: Action[]): Action {\n    return actions[Math.floor(Math.random() * actions.length)];\n}\n\nfunction normilizeQuestion(question: string): string {\n    question = question.replace('*', '×');\n    question = question.replace('/', '÷');\n    return question;\n}\n\nexport function generate(actions: Action[] = ['+', '-', '*', '/'], min: number = 0, max: number = 10, count: number = 10): Question[] {\n    let questions: Question[] = [];\n\n    for (let i = 0; i < count; i++) {\n        let action: Action = randomAction(actions);\n        let first: number = random(min, max), second: number = random(min, max);\n\n        if (action === '/' && (first === 0 || second === 0)) {\n            i--;\n            continue;\n        }\n\n        let question: string = `${first} ${action} ${second}`;\n        let answer: number = eval(question);\n\n        questions.push({\n            question: normilizeQuestion(question),\n            answer: answer\n        });\n    }\n\n    return questions;\n}\n"],"sourceRoot":""}